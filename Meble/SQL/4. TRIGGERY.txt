-- TRIGGER UserIsSuppler

CREATE TRIGGER CheckIsSupplierAfterInsert
ON suppliers
AFTER INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM inserted i
        INNER JOIN users u ON i.supplier_person_id = u.user_person_id
        WHERE u.user_is_supplier = 0
    )
    BEGIN
        ROLLBACK TRANSACTION;
        RAISERROR('Nie można wstawić danych do tabeli. Użytkownik nie jest dostawcą.', 16, 1);
    END
END;

-- END OF TRIGGER UserIsSuppler

-- TRIGGER UserIsClient

CREATE TRIGGER CheckIsClientAfterInsert
ON client_orders
AFTER INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM inserted i
        INNER JOIN users u ON i.client_order_person_id = u.user_person_id
        WHERE u.user_is_supplier = 1 OR u.user_is_employee = 1
    )
    BEGIN
        ROLLBACK TRANSACTION;
        RAISERROR('Nie można wstawić danych do tabeli. Użytkownik nie jest klientem.', 16, 1);
    END
END;

-- END OF TRIGGER UserIsClient

-- TRIGGER UserIsEmployee

CREATE TRIGGER CheckIsEmployeeAfterInsert
ON employees
AFTER INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM inserted i
        INNER JOIN users u ON i.employee_person_id = u.user_person_id
        WHERE u.user_is_employee = 0 OR u.user_is_supplier = 1
    )
    BEGIN
        ROLLBACK TRANSACTION;
        RAISERROR('Nie można wstawić danych do tabeli. Osoba nie jest pracownikiem.', 16, 1);
    END
END;

-- END OF TRIGGER UserIsEmployee

-- TRIGGER UserConflict

CREATE TRIGGER CheckUserRolesAfterInsert
ON users
AFTER INSERT
AS
BEGIN
    IF EXISTS (
        SELECT 1
        FROM inserted i
        WHERE i.user_is_employee = 1 AND i.user_is_supplier = 1
    )
    BEGIN
        ROLLBACK TRANSACTION;
        RAISERROR('Nie można wstawić danych do tabeli. Użytkownik nie może być jednocześnie pracownikiem i dostawcą.', 16, 1);
    END
END;

-- END OF TRIGGER UserConflict

