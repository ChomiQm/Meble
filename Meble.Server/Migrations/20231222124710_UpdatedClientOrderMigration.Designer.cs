// <auto-generated />
using System;
using Meble.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Meble.Server.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20231222124710_UpdatedClientOrderMigration")]
    partial class UpdatedClientOrderMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Meble.Server.Models.ClientOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateOnly?>("OrderDateOfOrder")
                        .HasColumnType("date")
                        .HasColumnName("DateOfOrder");

                    b.Property<DateTime?>("OrderDateOfUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ClientOrderDateOfUpdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrderUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("OrderUserId");

                    b.Property<int>("TotalItemsOrdered")
                        .HasColumnType("int")
                        .HasColumnName("TotalItemsOrdered");

                    b.Property<decimal>("TotalOrderValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TotalOrderValue");

                    b.HasKey("OrderId")
                        .HasName("PK_ClientOrder");

                    b.HasIndex("OrderUserId");

                    b.ToTable("ClientOrders", "dbo");
                });

            modelBuilder.Entity("Meble.Server.Models.Furniture", b =>
                {
                    b.Property<int>("FurnitureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FurnitureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FurnitureId"));

                    b.Property<DateOnly?>("FurnitureDateOfAddition")
                        .HasColumnType("date")
                        .HasColumnName("DateOfAddition");

                    b.Property<DateTime?>("FurnitureDateOfUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FurnitureDateOfUpdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FurnitureDescription")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FurnitureDescription");

                    b.Property<string>("FurnitureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FurnitureName");

                    b.Property<decimal>("FurniturePrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Price");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("FurnitureId")
                        .HasName("PK_Furniture");

                    b.ToTable("Furnitures", "dbo");
                });

            modelBuilder.Entity("Meble.Server.Models.FurnitureCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime?>("CategoryDateOfUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CategoryDateOfUpdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CategoryFurnitureId")
                        .HasColumnType("int")
                        .HasColumnName("category_furniture_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CategoryName");

                    b.HasKey("CategoryId")
                        .HasName("PK_FurnitureCategory");

                    b.HasIndex("CategoryFurnitureId");

                    b.ToTable("FurnitureCategories", "dbo");
                });

            modelBuilder.Entity("Meble.Server.Models.FurniturePhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhotoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<DateTime?>("PhotoDateOfUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("PhotoDateOfUpdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PhotoDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PhotoDescription");

                    b.Property<int>("PhotoFurnitureId")
                        .HasColumnType("int")
                        .HasColumnName("PhotoFurnitureId");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PhotoUrl");

                    b.HasKey("PhotoId")
                        .HasName("PK_FurniturePhoto");

                    b.HasIndex("PhotoFurnitureId");

                    b.ToTable("FurniturePhotos", "dbo");
                });

            modelBuilder.Entity("Meble.Server.Models.OrderFurniture", b =>
                {
                    b.Property<int>("OrderFurnitureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderFurnitureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderFurnitureId"));

                    b.Property<int?>("FurnitureId")
                        .HasColumnType("int")
                        .HasColumnName("FurnitureId");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId");

                    b.HasKey("OrderFurnitureId")
                        .HasName("PK_OrderFurniture");

                    b.HasIndex("FurnitureId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderFurnitures", "dbo");
                });

            modelBuilder.Entity("Meble.Server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UserDateOfUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DateOfUpdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("Meble.Server.Models.UserData", b =>
                {
                    b.Property<string>("UserDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserCountry")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("UserdataCountry");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("UserdataFirstName");

                    b.Property<string>("UserFlatNumber")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("UserdataFlatNumber");

                    b.Property<int?>("UserHomeNumber")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("int")
                        .HasColumnName("UserdataHomeNumber");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserStreet")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("UserdataStreet");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("UserdataSurname");

                    b.Property<string>("UserTown")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("UserdataTown");

                    b.HasKey("UserDataId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserDatas", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "dbo");
                });

            modelBuilder.Entity("Meble.Server.Models.ClientOrder", b =>
                {
                    b.HasOne("Meble.Server.Models.User", "OrderUser")
                        .WithMany("ClientOrders")
                        .HasForeignKey("OrderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClientOrderToUserId");

                    b.Navigation("OrderUser");
                });

            modelBuilder.Entity("Meble.Server.Models.FurnitureCategory", b =>
                {
                    b.HasOne("Meble.Server.Models.Furniture", "CategoryFurniture")
                        .WithMany("FurnitureCategories")
                        .HasForeignKey("CategoryFurnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryToFurniture");

                    b.Navigation("CategoryFurniture");
                });

            modelBuilder.Entity("Meble.Server.Models.FurniturePhoto", b =>
                {
                    b.HasOne("Meble.Server.Models.Furniture", "PhotoFurniture")
                        .WithMany("FurniturePhotos")
                        .HasForeignKey("PhotoFurnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PhotoToFurniture");

                    b.Navigation("PhotoFurniture");
                });

            modelBuilder.Entity("Meble.Server.Models.OrderFurniture", b =>
                {
                    b.HasOne("Meble.Server.Models.Furniture", "Furniture")
                        .WithMany("OrderFurnitures")
                        .HasForeignKey("FurnitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ToFurniture");

                    b.HasOne("Meble.Server.Models.ClientOrder", "Order")
                        .WithMany("OrderFurnitures")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ToCLientOrder");

                    b.Navigation("Furniture");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Meble.Server.Models.UserData", b =>
                {
                    b.HasOne("Meble.Server.Models.User", "User")
                        .WithOne("UserDatas")
                        .HasForeignKey("Meble.Server.Models.UserData", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Meble.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Meble.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meble.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Meble.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Meble.Server.Models.ClientOrder", b =>
                {
                    b.Navigation("OrderFurnitures");
                });

            modelBuilder.Entity("Meble.Server.Models.Furniture", b =>
                {
                    b.Navigation("FurnitureCategories");

                    b.Navigation("FurniturePhotos");

                    b.Navigation("OrderFurnitures");
                });

            modelBuilder.Entity("Meble.Server.Models.User", b =>
                {
                    b.Navigation("ClientOrders");

                    b.Navigation("UserDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
